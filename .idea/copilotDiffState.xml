<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/THREAT_MODEL.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/THREAT_MODEL.md" />
              <option name="updatedContent" value="# Threat Model Outline for oauth2 Ruby Gem&#10;&#10;## 1. Overview&#10;This document outlines the threat model for the `oauth2` Ruby gem, which implements OAuth 2.0, 2.1, and OIDC Core protocols. The gem is used to facilitate secure authorization and authentication in Ruby applications.&#10;&#10;## 2. Assets to Protect&#10;- OAuth access tokens, refresh tokens, and ID tokens&#10;- User credentials (if handled)&#10;- Client secrets and application credentials&#10;- Sensitive user data accessed via OAuth&#10;- Private keys and certificates (for signing/verifying tokens)&#10;&#10;## 3. Potential Threat Actors&#10;- External attackers (internet-based)&#10;- Malicious OAuth clients or resource servers&#10;- Insiders (developers, maintainers)&#10;- Compromised dependencies&#10;&#10;## 4. Attack Surfaces&#10;- OAuth endpoints (authorization, token, revocation, introspection)&#10;- HTTP request/response handling&#10;- Token storage and management&#10;- Configuration files and environment variables&#10;- Dependency supply chain&#10;&#10;## 5. Threats and Mitigations&#10;&#10;### 5.1 Token Leakage&#10;- **Threat:** Tokens exposed via logs, URLs, or insecure storage&#10;- **Mitigations:**&#10;  - Avoid logging sensitive tokens&#10;  - Use secure storage mechanisms&#10;  - Never expose tokens in URLs&#10;&#10;### 5.2 Token Replay and Forgery&#10;- **Threat:** Attackers reuse or forge tokens&#10;- **Mitigations:**&#10;  - Validate token signatures and claims&#10;  - Use short-lived tokens and refresh tokens&#10;  - Implement token revocation&#10;&#10;### 5.3 Insecure Communication&#10;- **Threat:** Data intercepted via MITM attacks&#10;- **Mitigations:**&#10;  - Enforce HTTPS for all communications&#10;  - Validate SSL/TLS certificates&#10;&#10;### 5.4 Client Secret Exposure&#10;- **Threat:** Client secrets leaked in code or version control&#10;- **Mitigations:**&#10;  - Store secrets in environment variables or secure vaults&#10;  - Never commit secrets to source control&#10;&#10;### 5.5 Dependency Vulnerabilities&#10;- **Threat:** Vulnerabilities in third-party libraries&#10;- **Mitigations:**&#10;  - Regularly update dependencies&#10;  - Use tools like `bundler-audit` for vulnerability scanning&#10;&#10;### 5.6 Improper Input Validation&#10;- **Threat:** Injection attacks via untrusted input&#10;- **Mitigations:**&#10;  - Validate and sanitize all inputs&#10;  - Use parameterized queries and safe APIs&#10;&#10;### 5.7 Insufficient Logging and Monitoring&#10;- **Threat:** Attacks go undetected&#10;- **Mitigations:**&#10;  - Log security-relevant events (without sensitive data)&#10;  - Monitor for suspicious activity&#10;&#10;## 6. Assumptions&#10;- The gem is used in a secure environment with up-to-date Ruby and dependencies&#10;- End-users are responsible for secure configuration and deployment&#10;&#10;## 7. Out of Scope&#10;- Security of external OAuth providers&#10;- Application-level business logic&#10;&#10;## 8. References&#10;- [OAuth 2.0 Threat Model and Security Considerations (RFC 6819)](https://tools.ietf.org/html/rfc6819)&#10;- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)&#10;&#10;---&#10;This outline should be reviewed and updated regularly as the project evolves.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>